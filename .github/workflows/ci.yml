name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ '**' ]

jobs:
  # 1. Tests
  test:
    name: Ejecutar tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    env:
      ENVIRONMENT:             ${{ secrets.ENVIRONMENT }}
      SECRET_KEY:              ${{ secrets.SECRET_KEY }}
      ALGORITHM:               ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
      DATABASE_URL:            ${{ secrets.DATABASE_URL }}
      EMAIL_SENDER:            ${{ secrets.EMAIL_SENDER }}
      EMAIL_APP_PASSWORD:      ${{ secrets.EMAIL_APP_PASSWORD }}
      LOGS_TOKEN:              ${{ secrets.LOGS_TOKEN }}
      FACE_RECOGNITION_AI_MODEL: ${{ secrets.FACE_RECOGNITION_AI_MODEL }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Ejecutar tests con pytest
        run: |
          pytest -n auto --junitxml=test-results/junit.xml --verbose || true
      - name: Guardar resultados de test
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results

  # 2. Lint con flake8
  lint:
    name: Comprobar estilo con flake8
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Instalar flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Ejecutar flake8
        continue-on-error: true
        run: flake8 --ignore=E501 --exclude=.venv,.git,__pycache__ .

  # 3. Seguridad: Bandit
  bandit:
    name: "Security scan: Bandit"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Instalar bandit
        run: pip install bandit
      - name: Ejecutar bandit
        continue-on-error: true
        run: bandit -r ./app || true

  # 4. Seguridad: Trivy
  trivy:
    name: "Security scan: Trivy FS"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Instalar Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin
      - name: Ejecutar Trivy filesystem scan
        continue-on-error: true
        run: trivy fs --exit-code 0 .

  # 5. Build Docker image
  docker-build:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [trivy, bandit]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: docker build -t myapp:${{ github.sha }} .